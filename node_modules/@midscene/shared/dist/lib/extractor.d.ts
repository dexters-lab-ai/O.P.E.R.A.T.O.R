import { NodeType } from './constants.js';
import { B as BaseElement, E as ElementTreeNode } from './index-305e7a7e.js';

declare function descriptionOfTree<ElementType extends BaseElement = BaseElement>(tree: ElementTreeNode<ElementType>, truncateTextLength?: number, filterNonTextContent?: boolean): string;
declare function treeToList<T extends BaseElement>(tree: ElementTreeNode<T>): T[];
declare function traverseTree<T extends BaseElement, ReturnNodeType extends BaseElement>(tree: ElementTreeNode<T>, onNode: (node: T) => ReturnNodeType): ElementTreeNode<ReturnNodeType>;

interface WebElementInfo extends ElementInfo {
    zoom: number;
    screenWidth?: number;
    screenHeight?: number;
}
interface WebElementNode {
    node: WebElementInfo | null;
    children: WebElementNode[];
}
declare function extractTextWithPosition$1(initNode: globalThis.Node, debugMode?: boolean): WebElementInfo[];
declare function extractTreeNodeAsString(initNode: globalThis.Node, debugMode?: boolean): string;
declare function extractTreeNode(initNode: globalThis.Node, debugMode?: boolean): WebElementNode;

declare function extractTextWithPosition(initNode: globalThis.Document): ElementInfo[];

interface ElementInfo {
    id: string;
    indexId: number;
    nodeHashId: string;
    locator: string;
    attributes: {
        nodeType: NodeType;
        [key: string]: string;
    };
    nodeType: NodeType;
    content: string;
    rect: {
        left: number;
        top: number;
        width: number;
        height: number;
    };
    center: [number, number];
}
interface ElementNode {
    node: ElementInfo | null;
    children: ElementNode[];
}

export { type ElementInfo, type ElementNode, extractTextWithPosition as clientExtractTextWithPosition, descriptionOfTree, traverseTree, treeToList, extractTreeNode as webExtractNodeTree, extractTreeNodeAsString as webExtractNodeTreeAsString, extractTextWithPosition$1 as webExtractTextWithPosition };
