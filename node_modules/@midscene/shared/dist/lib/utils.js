"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  assert: () => assert,
  enableDebug: () => enableDebug,
  generateHashId: () => generateHashId,
  getDebug: () => getDebug,
  ifInBrowser: () => ifInBrowser,
  uuid: () => uuid
});
module.exports = __toCommonJS(utils_exports);
var import_js_sha256 = require("js-sha256");
var import_debug = __toESM(require("debug"));
var ifInBrowser = typeof window !== "undefined";
function uuid() {
  return Math.random().toString(36).substring(2, 15);
}
var hashMap = {};
var topicPrefix = "midscene";
function getDebug(topic) {
  return (0, import_debug.default)(`${topicPrefix}:${topic}`);
}
function enableDebug(topic) {
  import_debug.default.enable(`${topicPrefix}:${topic}`);
}
function generateHashId(rect, content = "") {
  const combined = JSON.stringify({
    content,
    rect
  });
  let sliceLength = 5;
  let slicedHash = "";
  const hashHex = import_js_sha256.sha256.create().update(combined).hex();
  const toLetters = (hex) => {
    return hex.split("").map((char) => {
      const code = Number.parseInt(char, 16);
      return String.fromCharCode(97 + code % 26);
    }).join("");
  };
  const hashLetters = toLetters(hashHex);
  while (sliceLength < hashLetters.length - 1) {
    slicedHash = hashLetters.slice(0, sliceLength);
    if (hashMap[slicedHash] && hashMap[slicedHash] !== combined) {
      sliceLength++;
      continue;
    }
    hashMap[slicedHash] = combined;
    break;
  }
  return slicedHash;
}
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assert,
  enableDebug,
  generateHashId,
  getDebug,
  ifInBrowser,
  uuid
});
