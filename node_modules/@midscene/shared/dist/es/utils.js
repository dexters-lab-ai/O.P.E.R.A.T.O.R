// src/utils.ts
import { sha256 } from "js-sha256";
import debug from "debug";
var ifInBrowser = typeof window !== "undefined";
function uuid() {
  return Math.random().toString(36).substring(2, 15);
}
var hashMap = {};
var topicPrefix = "midscene";
function getDebug(topic) {
  return debug(`${topicPrefix}:${topic}`);
}
function enableDebug(topic) {
  debug.enable(`${topicPrefix}:${topic}`);
}
function generateHashId(rect, content = "") {
  const combined = JSON.stringify({
    content,
    rect
  });
  let sliceLength = 5;
  let slicedHash = "";
  const hashHex = sha256.create().update(combined).hex();
  const toLetters = (hex) => {
    return hex.split("").map((char) => {
      const code = Number.parseInt(char, 16);
      return String.fromCharCode(97 + code % 26);
    }).join("");
  };
  const hashLetters = toLetters(hashHex);
  while (sliceLength < hashLetters.length - 1) {
    slicedHash = hashLetters.slice(0, sliceLength);
    if (hashMap[slicedHash] && hashMap[slicedHash] !== combined) {
      sliceLength++;
      continue;
    }
    hashMap[slicedHash] = combined;
    break;
  }
  return slicedHash;
}
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
export {
  assert,
  enableDebug,
  generateHashId,
  getDebug,
  ifInBrowser,
  uuid
};
