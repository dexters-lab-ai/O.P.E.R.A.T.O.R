"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/common/utils.ts
var utils_exports = {};
__export(utils_exports, {
  ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED: () => ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED,
  generateCacheId: () => generateCacheId,
  getCurrentExecutionFile: () => getCurrentExecutionFile,
  parseContextFromWebPage: () => parseContextFromWebPage,
  printReportMsg: () => printReportMsg,
  reportFileName: () => reportFileName
});
module.exports = __toCommonJS(utils_exports);
var import_env = require("@midscene/core/env");
var import_utils = require("@midscene/core/utils");
var import_constants = require("@midscene/shared/constants");
var import_extractor = require("@midscene/shared/extractor");
var import_img = require("@midscene/shared/img");
var import_utils2 = require("@midscene/shared/utils");
var import_dayjs = __toESM(require("dayjs"));

// src/web-element.ts
var WebElementInfo = class {
  constructor({
    content,
    rect,
    // page,
    locator,
    id,
    attributes,
    indexId
  }) {
    this.content = content;
    this.rect = rect;
    this.center = [
      Math.floor(rect.left + rect.width / 2),
      Math.floor(rect.top + rect.height / 2)
    ];
    this.locator = locator;
    this.id = id;
    this.attributes = attributes;
    this.indexId = indexId;
  }
};

// src/common/utils.ts
async function parseContextFromWebPage(page, _opt) {
  (0, import_utils2.assert)(page, "page is required");
  if (page._forceUsePageContext) {
    return await page._forceUsePageContext();
  }
  const url = await page.url();
  (0, import_utils.uploadTestInfoToServer)({ testUrl: url });
  let screenshotBase64;
  let tree;
  await Promise.all([
    page.screenshotBase64().then((base64) => {
      screenshotBase64 = base64;
    }),
    page.getElementsNodeTree().then(async (treeRoot) => {
      tree = treeRoot;
    })
  ]);
  const webTree = (0, import_extractor.traverseTree)(tree, (elementInfo) => {
    const { rect, id, content, attributes, locator, indexId } = elementInfo;
    return new WebElementInfo({
      rect,
      locator,
      id,
      content,
      attributes,
      indexId
    });
  });
  const elementsInfo = (0, import_extractor.treeToList)(webTree);
  (0, import_utils2.assert)(screenshotBase64, "screenshotBase64 is required");
  const elementsPositionInfoWithoutText = elementsInfo.filter(
    (elementInfo) => {
      if (elementInfo.attributes.nodeType === import_constants.NodeType.TEXT) {
        return false;
      }
      return true;
    }
  );
  const size = await page.size();
  if (size.dpr && size.dpr > 1) {
    screenshotBase64 = await (0, import_img.resizeImgBase64)(screenshotBase64, {
      width: size.width,
      height: size.height
    });
  }
  let screenshotBase64WithElementMarker = screenshotBase64;
  if (!(0, import_env.getAIConfig)(import_env.MIDSCENE_USE_VLM_UI_TARS)) {
    if (_opt?.ignoreMarker) {
      screenshotBase64WithElementMarker = screenshotBase64;
    } else {
      screenshotBase64WithElementMarker = await (0, import_img.compositeElementInfoImg)({
        inputImgBase64: screenshotBase64,
        elementsPositionInfo: elementsPositionInfoWithoutText,
        size
      });
    }
  }
  return {
    content: elementsInfo,
    tree: webTree,
    size,
    screenshotBase64,
    screenshotBase64WithElementMarker,
    url
  };
}
function reportFileName(tag = "web") {
  const reportTagName = (0, import_env.getAIConfig)(import_env.MIDSCENE_REPORT_TAG_NAME);
  const dateTimeInFileName = (0, import_dayjs.default)().format("YYYY-MM-DD_HH-mm-ss-SSS");
  return `${reportTagName || tag}-${dateTimeInFileName}`;
}
function printReportMsg(filepath) {
  console.log("Midscene - report file updated:", filepath);
}
function getCurrentExecutionFile(trace) {
  const error = new Error();
  const stackTrace = trace || error.stack;
  const pkgDir = process.cwd() || "";
  if (stackTrace) {
    const stackLines = stackTrace.split("\n");
    for (const line of stackLines) {
      if (line.includes(".spec.") || line.includes(".test.") || line.includes(".ts") || line.includes(".js")) {
        const match = line.match(/(?:at\s+)?(.*?\.(?:spec|test)\.[jt]s)/);
        if (match?.[1]) {
          const targetFileName = match[1].replace(pkgDir, "").trim().replace("at ", "");
          return targetFileName;
        }
      }
    }
  }
  return false;
}
var testFileIndex = /* @__PURE__ */ new Map();
function generateCacheId(fileName) {
  let taskFile = fileName || getCurrentExecutionFile();
  if (!taskFile) {
    taskFile = (0, import_utils2.uuid)();
    console.warn(
      "Midscene - using random UUID for cache id. Cache may be invalid."
    );
  }
  if (testFileIndex.has(taskFile)) {
    const currentIndex = testFileIndex.get(taskFile);
    if (currentIndex !== void 0) {
      testFileIndex.set(taskFile, currentIndex + 1);
    }
  } else {
    testFileIndex.set(taskFile, 1);
  }
  return `${taskFile}-${testFileIndex.get(taskFile)}`;
}
var ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED = "NOT_IMPLEMENTED_AS_DESIGNED";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED,
  generateCacheId,
  getCurrentExecutionFile,
  parseContextFromWebPage,
  printReportMsg,
  reportFileName
});

//# sourceMappingURL=utils.js.map