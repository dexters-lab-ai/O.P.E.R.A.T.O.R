{"version":3,"mappings":"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","names":["yaml","import_utils","import_js_yaml"],"ignoreList":[],"sources":["../../src/yaml/index.ts","../../src/yaml/player.ts","../../src/yaml/builder.ts","../../src/yaml/utils.ts"],"sourcesContent":["export * from './player';\nexport * from './builder';\nexport * from './utils';\n","import { existsSync, mkdirSync, writeFileSync } from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { assert } from '@midscene/shared/utils';\n\nimport type { PageAgent } from '@/common/agent';\nimport type {\n  FreeFn,\n  MidsceneYamlFlowItemAIAction,\n  MidsceneYamlFlowItemAIAssert,\n  MidsceneYamlFlowItemAIQuery,\n  MidsceneYamlFlowItemAIWaitFor,\n  MidsceneYamlFlowItemSleep,\n  MidsceneYamlScript,\n  MidsceneYamlScriptEnv,\n  ScriptPlayerStatusValue,\n  ScriptPlayerTaskStatus,\n} from '@midscene/core';\n\nexport class ScriptPlayer {\n  public currentTaskIndex?: number;\n  public taskStatusList: ScriptPlayerTaskStatus[] = [];\n  public status: ScriptPlayerStatusValue = 'init';\n  public reportFile?: string | null;\n  public result: Record<string, any>;\n  private unnamedResultIndex = 0;\n  public output?: string | null;\n  public errorInSetup?: Error;\n  private pageAgent: PageAgent | null = null;\n  constructor(\n    private script: MidsceneYamlScript,\n    private setupAgent: (target: MidsceneYamlScriptEnv) => Promise<{\n      agent: PageAgent;\n      freeFn: FreeFn[];\n    }>,\n    public onTaskStatusChange?: (taskStatus: ScriptPlayerTaskStatus) => void,\n  ) {\n    this.result = {};\n    this.output = script.target?.output;\n    this.taskStatusList = (script.tasks || []).map((task, taskIndex) => ({\n      ...task,\n      index: taskIndex,\n      status: 'init',\n      totalSteps: task.flow?.length || 0,\n    }));\n  }\n\n  private setPlayerStatus(status: ScriptPlayerStatusValue, error?: Error) {\n    this.status = status;\n    this.errorInSetup = error;\n  }\n\n  private notifyCurrentTaskStatusChange(taskIndex?: number) {\n    const taskIndexToNotify =\n      typeof taskIndex === 'number' ? taskIndex : this.currentTaskIndex;\n\n    if (typeof taskIndexToNotify !== 'number') {\n      return;\n    }\n\n    const taskStatus = this.taskStatusList[taskIndexToNotify];\n    if (this.onTaskStatusChange) {\n      this.onTaskStatusChange(taskStatus);\n    }\n  }\n\n  private async setTaskStatus(\n    index: number,\n    statusValue: ScriptPlayerStatusValue,\n    error?: Error,\n  ) {\n    this.taskStatusList[index].status = statusValue;\n    if (error) {\n      this.taskStatusList[index].error = error;\n    }\n\n    this.notifyCurrentTaskStatusChange(index);\n  }\n\n  private setTaskIndex(taskIndex: number) {\n    this.currentTaskIndex = taskIndex;\n  }\n\n  private flushResult() {\n    if (Object.keys(this.result).length && this.output) {\n      const output = join(process.cwd(), this.output);\n      const outputDir = dirname(output);\n      if (!existsSync(outputDir)) {\n        mkdirSync(outputDir, { recursive: true });\n      }\n      writeFileSync(output, JSON.stringify(this.result, undefined, 2));\n    }\n  }\n\n  async playTask(taskStatus: ScriptPlayerTaskStatus, agent: PageAgent) {\n    const { flow } = taskStatus;\n    assert(flow, 'missing flow in task');\n\n    for (const flowItemIndex in flow) {\n      const currentStep = Number.parseInt(flowItemIndex, 10);\n      taskStatus.currentStep = currentStep;\n      const flowItem = flow[flowItemIndex];\n      if (\n        (flowItem as MidsceneYamlFlowItemAIAction).aiAction ||\n        (flowItem as MidsceneYamlFlowItemAIAction).ai\n      ) {\n        const actionTask = flowItem as MidsceneYamlFlowItemAIAction;\n        const prompt = actionTask.aiAction || actionTask.ai;\n        assert(prompt, 'missing prompt for ai (aiAction)');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiAction must be a string',\n        );\n        await agent.aiAction(prompt);\n      } else if ((flowItem as MidsceneYamlFlowItemAIAssert).aiAssert) {\n        const assertTask = flowItem as MidsceneYamlFlowItemAIAssert;\n        const prompt = assertTask.aiAssert;\n        assert(prompt, 'missing prompt for aiAssert');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiAssert must be a string',\n        );\n        await agent.aiAssert(prompt);\n      } else if ((flowItem as MidsceneYamlFlowItemAIQuery).aiQuery) {\n        const queryTask = flowItem as MidsceneYamlFlowItemAIQuery;\n        const prompt = queryTask.aiQuery;\n        assert(prompt, 'missing prompt for aiQuery');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiQuery must be a string',\n        );\n        const queryResult = await agent.aiQuery(prompt);\n        const resultKey = queryTask.name || this.unnamedResultIndex++;\n        if (this.result[resultKey]) {\n          console.warn(\n            `result key ${resultKey} already exists, will overwrite`,\n          );\n        }\n\n        this.result[resultKey] = queryResult;\n        this.flushResult();\n      } else if ((flowItem as MidsceneYamlFlowItemAIWaitFor).aiWaitFor) {\n        const waitForTask = flowItem as MidsceneYamlFlowItemAIWaitFor;\n        const prompt = waitForTask.aiWaitFor;\n        assert(prompt, 'missing prompt for aiWaitFor');\n        assert(\n          typeof prompt === 'string',\n          'prompt for aiWaitFor must be a string',\n        );\n        const timeout = waitForTask.timeout;\n        await agent.aiWaitFor(prompt, { timeoutMs: timeout });\n      } else if ((flowItem as MidsceneYamlFlowItemSleep).sleep) {\n        const sleepTask = flowItem as MidsceneYamlFlowItemSleep;\n        const ms = sleepTask.sleep;\n        let msNumber = ms;\n        if (typeof ms === 'string') {\n          msNumber = Number.parseInt(ms, 10);\n        }\n        assert(\n          msNumber && msNumber > 0,\n          `ms for sleep must be greater than 0, but got ${ms}`,\n        );\n        await new Promise((resolve) => setTimeout(resolve, msNumber));\n      } else {\n        throw new Error(`unknown flowItem: ${JSON.stringify(flowItem)}`);\n      }\n    }\n    this.reportFile = agent.reportFile;\n  }\n\n  async run() {\n    const { target, tasks } = this.script;\n    this.setPlayerStatus('running');\n\n    let agent: PageAgent | null = null;\n    let freeFn: FreeFn[] = [];\n    try {\n      const { agent: newAgent, freeFn: newFreeFn } =\n        await this.setupAgent(target);\n      agent = newAgent;\n      freeFn = newFreeFn;\n    } catch (e) {\n      this.setPlayerStatus('error', e as Error);\n      return;\n    }\n    this.pageAgent = agent;\n\n    let taskIndex = 0;\n    this.setPlayerStatus('running');\n    let errorFlag = false;\n    while (taskIndex < tasks.length) {\n      const taskStatus = this.taskStatusList[taskIndex];\n      this.setTaskStatus(taskIndex, 'running' as any);\n      this.setTaskIndex(taskIndex);\n\n      try {\n        await this.playTask(taskStatus, this.pageAgent);\n        this.setTaskStatus(taskIndex, 'done' as any);\n      } catch (e) {\n        this.setTaskStatus(taskIndex, 'error' as any, e as Error);\n\n        if (taskStatus.continueOnError) {\n          // nothing more to do\n        } else {\n          this.reportFile = agent.reportFile;\n          errorFlag = true;\n          break;\n        }\n      }\n      this.reportFile = agent.reportFile;\n      taskIndex++;\n    }\n\n    if (errorFlag) {\n      this.setPlayerStatus('error');\n    } else {\n      this.setPlayerStatus('done');\n    }\n\n    // free the resources\n    for (const fn of freeFn) {\n      try {\n        // console.log('freeing', fn.name);\n        await fn.fn();\n        // console.log('freed', fn.name);\n      } catch (e) {\n        // console.error('error freeing', fn.name, e);\n      }\n    }\n  }\n}\n","import type {\n  MidsceneYamlScript,\n  MidsceneYamlScriptEnv,\n  MidsceneYamlTask,\n} from '@midscene/core';\nimport yaml from 'js-yaml';\n\nexport function buildYaml(\n  env: MidsceneYamlScriptEnv,\n  tasks: MidsceneYamlTask[],\n) {\n  const result: MidsceneYamlScript = {\n    target: env,\n    tasks,\n  };\n\n  return yaml.dump(result, {\n    indent: 2,\n  });\n}\n","import { assert } from '@midscene/shared/utils';\nimport yaml from 'js-yaml';\n\nimport type { MidsceneYamlScript } from '@midscene/core';\nimport type {\n  MidsceneYamlFlowItem,\n  MidsceneYamlFlowItemAIAction,\n  MidsceneYamlFlowItemAIAssert,\n  MidsceneYamlFlowItemAIQuery,\n  MidsceneYamlFlowItemAIWaitFor,\n  MidsceneYamlFlowItemSleep,\n} from '@midscene/core';\n\nfunction interpolateEnvVars(content: string): string {\n  return content.replace(/\\$\\{([^}]+)\\}/g, (_, envVar) => {\n    const value = process.env[envVar.trim()];\n    if (value === undefined) {\n      throw new Error(`Environment variable \"${envVar.trim()}\" is not defined`);\n    }\n    return value;\n  });\n}\n\nexport function parseYamlScript(\n  content: string,\n  filePath?: string,\n  ignoreCheckingTarget?: boolean,\n): MidsceneYamlScript {\n  const interpolatedContent = interpolateEnvVars(content);\n  const obj = yaml.load(interpolatedContent) as MidsceneYamlScript;\n  const pathTip = filePath ? `, failed to load ${filePath}` : '';\n  if (!ignoreCheckingTarget) {\n    assert(\n      obj.target,\n      `property \"target\" is required in yaml script${pathTip}`,\n    );\n    assert(\n      typeof obj.target === 'object',\n      `property \"target\" must be an object${pathTip}`,\n    );\n  }\n  assert(obj.tasks, `property \"tasks\" is required in yaml script ${pathTip}`);\n  assert(\n    Array.isArray(obj.tasks),\n    `property \"tasks\" must be an array in yaml script, but got ${obj.tasks}`,\n  );\n  return obj;\n}\n\nexport const flowItemBrief = (flowItem?: MidsceneYamlFlowItem) => {\n  if (!flowItem) {\n    return '';\n  }\n\n  const sliceText = (text?: string) => {\n    const lengthLimit = 60;\n    if (text && text.length > lengthLimit) {\n      return `${text.slice(0, lengthLimit)}...`;\n    }\n\n    return text || '';\n  };\n\n  if (\n    (flowItem as MidsceneYamlFlowItemAIAction).aiAction ||\n    (flowItem as MidsceneYamlFlowItemAIAction).ai\n  ) {\n    const lastTip = (\n      (flowItem as MidsceneYamlFlowItemAIAction).aiActionProgressTips || []\n    ).at(-1);\n    return `aiAction: ${sliceText(\n      lastTip ||\n        (flowItem as MidsceneYamlFlowItemAIAction).aiAction ||\n        (flowItem as MidsceneYamlFlowItemAIAction).ai,\n    )}`;\n  }\n  if ((flowItem as MidsceneYamlFlowItemAIAssert).aiAssert) {\n    return `aiAssert: ${sliceText(\n      (flowItem as MidsceneYamlFlowItemAIAssert).aiAssert,\n    )}`;\n  }\n  if ((flowItem as MidsceneYamlFlowItemAIQuery).aiQuery) {\n    return `aiQuery: ${sliceText((flowItem as MidsceneYamlFlowItemAIQuery).aiQuery)}`;\n  }\n  if ((flowItem as MidsceneYamlFlowItemAIWaitFor).aiWaitFor) {\n    return `aiWaitFor: ${sliceText(\n      (flowItem as MidsceneYamlFlowItemAIWaitFor).aiWaitFor,\n    )}`;\n  }\n  if ((flowItem as MidsceneYamlFlowItemSleep).sleep) {\n    return `sleep: ${(flowItem as MidsceneYamlFlowItemSleep).sleep}`;\n  }\n  return '';\n};\n"]}