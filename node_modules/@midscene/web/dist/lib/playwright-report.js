"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/playwright/reporter/index.ts
var reporter_exports = {};
__export(reporter_exports, {
  default: () => reporter_default
});
module.exports = __toCommonJS(reporter_exports);

// src/common/utils.ts
var import_env = require("@midscene/core/env");
var import_utils = require("@midscene/core/utils");
var import_constants = require("@midscene/shared/constants");
var import_extractor = require("@midscene/shared/extractor");
var import_img = require("@midscene/shared/img");
var import_utils2 = require("@midscene/shared/utils");
var import_dayjs = __toESM(require("dayjs"));
function reportFileName(tag = "web") {
  const reportTagName = (0, import_env.getAIConfig)(import_env.MIDSCENE_REPORT_TAG_NAME);
  const dateTimeInFileName = (0, import_dayjs.default)().format("YYYY-MM-DD_HH-mm-ss-SSS");
  return `${reportTagName || tag}-${dateTimeInFileName}`;
}
function printReportMsg(filepath) {
  console.log("Midscene - report file updated:", filepath);
}

// src/playwright/reporter/index.ts
var import_utils4 = require("@midscene/core/utils");
function logger(...message) {
  if (process.env.DEBUG === "true") {
    console.log("Midscene e2e report:", ...message);
  }
}
var testDataList = [];
var filename;
function updateReport() {
  const reportPath = (0, import_utils4.writeDumpReport)(filename, testDataList);
  reportPath && printReportMsg(reportPath);
}
var MidsceneReporter = class {
  async onBegin(config, suite) {
    if (!filename) {
      filename = reportFileName("playwright-merged");
    }
  }
  onTestBegin(test, _result) {
  }
  onTestEnd(test, result) {
    const dumpAnnotation = test.annotations.find((annotation) => {
      return annotation.type === "MIDSCENE_DUMP_ANNOTATION";
    });
    if (!dumpAnnotation?.description)
      return;
    testDataList.push({
      dumpString: dumpAnnotation.description,
      attributes: {
        playwright_test_id: test.id,
        playwright_test_title: test.title,
        playwright_test_status: result.status,
        playwright_test_duration: result.duration
      }
    });
    test.annotations = test.annotations.filter(
      (annotation) => annotation.type !== "MIDSCENE_DUMP_ANNOTATION"
    );
    updateReport();
  }
  onEnd(result) {
    updateReport();
    logger(`Finished the run: ${result.status}`);
  }
};
var reporter_default = MidsceneReporter;

//# sourceMappingURL=playwright-report.js.map