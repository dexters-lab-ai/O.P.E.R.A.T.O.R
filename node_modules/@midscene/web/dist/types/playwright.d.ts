import { b as PageTaskExecutor, P as PageAgent, a as PageAgentOpt } from './agent-3fa82650.js';
import { Page } from 'playwright';
import { AgentWaitForOpt } from '@midscene/core';
import { TestInfo } from '@playwright/test';
export { overrideAIConfig } from '@midscene/core/env';
export { b as PlaywrightWebPage } from './page-1f2132ee.js';
import '@midscene/core/ai-model';
import '@midscene/shared/fs';
import '@midscene/shared/extractor';
import 'puppeteer';
import '@midscene/shared/constants';
import 'webdriverio';

declare const PlaywrightAiFixture: (options?: {
    forceSameTabNavigation?: boolean;
}) => {
    ai: ({ page }: {
        page: Page;
    }, use: any, testInfo: TestInfo) => Promise<void>;
    aiAction: ({ page }: {
        page: Page;
    }, use: any, testInfo: TestInfo) => Promise<void>;
    aiQuery: ({ page }: {
        page: Page;
    }, use: any, testInfo: TestInfo) => Promise<void>;
    aiAssert: ({ page }: {
        page: Page;
    }, use: any, testInfo: TestInfo) => Promise<void>;
    aiWaitFor: ({ page }: {
        page: Page;
    }, use: any, testInfo: TestInfo) => Promise<void>;
};
type PlayWrightAiFixtureType = {
    ai: <T = any>(prompt: string, opts?: {
        type?: 'action' | 'query';
        trackNewTab?: boolean;
    }) => Promise<T>;
    aiAction: (taskPrompt: string) => ReturnType<PageTaskExecutor['action']>;
    aiQuery: <T = any>(demand: any) => Promise<T>;
    aiAssert: (assertion: string, errorMsg?: string) => Promise<void>;
    aiWaitFor: (assertion: string, opt?: AgentWaitForOpt) => Promise<void>;
};

declare class PlaywrightAgent extends PageAgent {
    constructor(page: Page, opts?: PageAgentOpt);
}

export { type PlayWrightAiFixtureType, PlaywrightAgent, PlaywrightAiFixture };
