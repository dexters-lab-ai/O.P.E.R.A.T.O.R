// src/common/utils.ts
import {
  MIDSCENE_REPORT_TAG_NAME,
  MIDSCENE_USE_VLM_UI_TARS,
  getAIConfig
} from "@midscene/core/env";
import { uploadTestInfoToServer } from "@midscene/core/utils";
import { NodeType } from "@midscene/shared/constants";
import { traverseTree, treeToList } from "@midscene/shared/extractor";
import { compositeElementInfoImg, resizeImgBase64 } from "@midscene/shared/img";
import { assert, uuid } from "@midscene/shared/utils";
import dayjs from "dayjs";

// src/web-element.ts
var WebElementInfo = class {
  constructor({
    content,
    rect,
    // page,
    locator,
    id,
    attributes,
    indexId
  }) {
    this.content = content;
    this.rect = rect;
    this.center = [
      Math.floor(rect.left + rect.width / 2),
      Math.floor(rect.top + rect.height / 2)
    ];
    this.locator = locator;
    this.id = id;
    this.attributes = attributes;
    this.indexId = indexId;
  }
};

// src/common/utils.ts
async function parseContextFromWebPage(page, _opt) {
  assert(page, "page is required");
  if (page._forceUsePageContext) {
    return await page._forceUsePageContext();
  }
  const url = await page.url();
  uploadTestInfoToServer({ testUrl: url });
  let screenshotBase64;
  let tree;
  await Promise.all([
    page.screenshotBase64().then((base64) => {
      screenshotBase64 = base64;
    }),
    page.getElementsNodeTree().then(async (treeRoot) => {
      tree = treeRoot;
    })
  ]);
  const webTree = traverseTree(tree, (elementInfo) => {
    const { rect, id, content, attributes, locator, indexId } = elementInfo;
    return new WebElementInfo({
      rect,
      locator,
      id,
      content,
      attributes,
      indexId
    });
  });
  const elementsInfo = treeToList(webTree);
  assert(screenshotBase64, "screenshotBase64 is required");
  const elementsPositionInfoWithoutText = elementsInfo.filter(
    (elementInfo) => {
      if (elementInfo.attributes.nodeType === NodeType.TEXT) {
        return false;
      }
      return true;
    }
  );
  const size = await page.size();
  if (size.dpr && size.dpr > 1) {
    screenshotBase64 = await resizeImgBase64(screenshotBase64, {
      width: size.width,
      height: size.height
    });
  }
  let screenshotBase64WithElementMarker = screenshotBase64;
  if (!getAIConfig(MIDSCENE_USE_VLM_UI_TARS)) {
    if (_opt?.ignoreMarker) {
      screenshotBase64WithElementMarker = screenshotBase64;
    } else {
      screenshotBase64WithElementMarker = await compositeElementInfoImg({
        inputImgBase64: screenshotBase64,
        elementsPositionInfo: elementsPositionInfoWithoutText,
        size
      });
    }
  }
  return {
    content: elementsInfo,
    tree: webTree,
    size,
    screenshotBase64,
    screenshotBase64WithElementMarker,
    url
  };
}
function reportFileName(tag = "web") {
  const reportTagName = getAIConfig(MIDSCENE_REPORT_TAG_NAME);
  const dateTimeInFileName = dayjs().format("YYYY-MM-DD_HH-mm-ss-SSS");
  return `${reportTagName || tag}-${dateTimeInFileName}`;
}
function printReportMsg(filepath) {
  console.log("Midscene - report file updated:", filepath);
}
function getCurrentExecutionFile(trace) {
  const error = new Error();
  const stackTrace = trace || error.stack;
  const pkgDir = process.cwd() || "";
  if (stackTrace) {
    const stackLines = stackTrace.split("\n");
    for (const line of stackLines) {
      if (line.includes(".spec.") || line.includes(".test.") || line.includes(".ts") || line.includes(".js")) {
        const match = line.match(/(?:at\s+)?(.*?\.(?:spec|test)\.[jt]s)/);
        if (match?.[1]) {
          const targetFileName = match[1].replace(pkgDir, "").trim().replace("at ", "");
          return targetFileName;
        }
      }
    }
  }
  return false;
}
var testFileIndex = /* @__PURE__ */ new Map();
function generateCacheId(fileName) {
  let taskFile = fileName || getCurrentExecutionFile();
  if (!taskFile) {
    taskFile = uuid();
    console.warn(
      "Midscene - using random UUID for cache id. Cache may be invalid."
    );
  }
  if (testFileIndex.has(taskFile)) {
    const currentIndex = testFileIndex.get(taskFile);
    if (currentIndex !== void 0) {
      testFileIndex.set(taskFile, currentIndex + 1);
    }
  } else {
    testFileIndex.set(taskFile, 1);
  }
  return `${taskFile}-${testFileIndex.get(taskFile)}`;
}
var ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED = "NOT_IMPLEMENTED_AS_DESIGNED";
export {
  ERROR_CODE_NOT_IMPLEMENTED_AS_DESIGNED,
  generateCacheId,
  getCurrentExecutionFile,
  parseContextFromWebPage,
  printReportMsg,
  reportFileName
};

//# sourceMappingURL=utils.js.map