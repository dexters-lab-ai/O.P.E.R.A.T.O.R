// src/common/utils.ts
import {
  MIDSCENE_REPORT_TAG_NAME,
  MIDSCENE_USE_VLM_UI_TARS,
  getAIConfig
} from "@midscene/core/env";
import { uploadTestInfoToServer } from "@midscene/core/utils";
import { NodeType } from "@midscene/shared/constants";
import { traverseTree, treeToList } from "@midscene/shared/extractor";
import { compositeElementInfoImg, resizeImgBase64 } from "@midscene/shared/img";
import { assert, uuid } from "@midscene/shared/utils";
import dayjs from "dayjs";
function reportFileName(tag = "web") {
  const reportTagName = getAIConfig(MIDSCENE_REPORT_TAG_NAME);
  const dateTimeInFileName = dayjs().format("YYYY-MM-DD_HH-mm-ss-SSS");
  return `${reportTagName || tag}-${dateTimeInFileName}`;
}
function printReportMsg(filepath) {
  console.log("Midscene - report file updated:", filepath);
}

// src/playwright/reporter/index.ts
import { writeDumpReport } from "@midscene/core/utils";
function logger(...message) {
  if (process.env.DEBUG === "true") {
    console.log("Midscene e2e report:", ...message);
  }
}
var testDataList = [];
var filename;
function updateReport() {
  const reportPath = writeDumpReport(filename, testDataList);
  reportPath && printReportMsg(reportPath);
}
var MidsceneReporter = class {
  async onBegin(config, suite) {
    if (!filename) {
      filename = reportFileName("playwright-merged");
    }
  }
  onTestBegin(test, _result) {
  }
  onTestEnd(test, result) {
    const dumpAnnotation = test.annotations.find((annotation) => {
      return annotation.type === "MIDSCENE_DUMP_ANNOTATION";
    });
    if (!dumpAnnotation?.description)
      return;
    testDataList.push({
      dumpString: dumpAnnotation.description,
      attributes: {
        playwright_test_id: test.id,
        playwright_test_title: test.title,
        playwright_test_status: result.status,
        playwright_test_duration: result.duration
      }
    });
    test.annotations = test.annotations.filter(
      (annotation) => annotation.type !== "MIDSCENE_DUMP_ANNOTATION"
    );
    updateReport();
  }
  onEnd(result) {
    updateReport();
    logger(`Finished the run: ${result.status}`);
  }
};
var reporter_default = MidsceneReporter;
export {
  reporter_default as default
};

//# sourceMappingURL=playwright-report.js.map