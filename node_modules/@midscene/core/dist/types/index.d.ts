import { E as ExecutionTask, a as ExecutionTaskProgressOptions, b as ExecutionTaskApply, c as ExecutionDump, B as BaseElement, U as UIContext, I as InsightAction, D as DumpSubscriber, d as InsightOptions, e as InsightTaskInfo, P as PlanningLocateParam, f as InsightAssertionResponse, A as AISingleElementResponse } from './types-90bb70c9.js';
export { r as AIAssertionResponse, n as AIElementCoordinatesResponse, m as AIElementLocatorResponse, o as AIElementResponse, j as AIResponseFormat, q as AISectionLocatorResponse, p as AISectionParseResponse, k as AISingleElementResponseById, l as AISingleElementResponseByPosition, i as AIUsageInfo, F as AgentAssertOpt, z as AgentWaitForOpt, Y as BaseAgentParserOpt, C as CallAIFn, X as Color, u as DumpMeta, y as ElementById, h as ElementTreeNode, s as EnsureObject, $ as ExecutionRecorderItem, ah as ExecutionTaskAction, ag as ExecutionTaskActionApply, af as ExecutionTaskInsightAssertion, ae as ExecutionTaskInsightAssertionApply, ad as ExecutionTaskInsightAssertionParam, a6 as ExecutionTaskInsightDumpLog, a8 as ExecutionTaskInsightLocate, a7 as ExecutionTaskInsightLocateApply, a5 as ExecutionTaskInsightLocateOutput, a4 as ExecutionTaskInsightLocateParam, ac as ExecutionTaskInsightQuery, ab as ExecutionTaskInsightQueryApply, aa as ExecutionTaskInsightQueryOutput, a9 as ExecutionTaskInsightQueryParam, aj as ExecutionTaskPlanning, ai as ExecutionTaskPlanningApply, a3 as ExecutionTaskReturn, a0 as ExecutionTaskType, a1 as ExecutorContext, ak as GroupedActionDump, w as InsightDump, t as InsightExtractParam, L as LiteUISection, O as OnTaskStartTip, x as PartialInsightDumpFromSDK, H as PlanningAIResponse, G as PlanningAction, Q as PlanningActionParamAssert, V as PlanningActionParamError, K as PlanningActionParamHover, M as PlanningActionParamInputOrKeyPress, N as PlanningActionParamScroll, T as PlanningActionParamSleep, J as PlanningActionParamTap, W as PlanningActionParamWaitFor, _ as PlaywrightParserOpt, g as Point, Z as PuppeteerParserOpt, R as Rect, v as ReportDumpWithAttributes, S as Size, a2 as TaskCacheInfo } from './types-90bb70c9.js';
import { c as callAiFn } from './llm-planning-4602f28e.js';
export { a as AiAssert, A as AiLocateElement, d as describeUserPage, p as plan, t as transformElementPositionToId } from './llm-planning-4602f28e.js';
export { getLogDirByType, getVersion, setLogDir } from './utils.js';
export { MIDSCENE_MODEL_NAME, getAIConfig } from './env.js';
import '@midscene/shared/constants';
import 'openai/resources';

interface MidsceneYamlScript {
    target: MidsceneYamlScriptEnv;
    tasks: MidsceneYamlTask[];
}
interface MidsceneYamlTask {
    name: string;
    flow: MidsceneYamlFlowItem[];
    continueOnError?: boolean;
}
interface MidsceneYamlScriptEnv {
    serve?: string;
    url: string;
    userAgent?: string;
    viewportWidth?: number;
    viewportHeight?: number;
    viewportScale?: number;
    waitForNetworkIdle?: {
        timeout?: number;
        continueOnNetworkIdleError?: boolean;
    };
    cookie?: string;
    output?: string;
    forceSameTabNavigation?: boolean;
    bridgeMode?: false | 'newTabWithUrl' | 'currentTab';
    closeNewTabsAfterDisconnect?: boolean;
}
interface MidsceneYamlFlowItemAIAction {
    ai?: string;
    aiAction?: string;
    aiActionProgressTips?: string[];
}
interface MidsceneYamlFlowItemAIAssert {
    aiAssert: string;
}
interface MidsceneYamlFlowItemAIQuery {
    aiQuery: string;
    name?: string;
}
interface MidsceneYamlFlowItemAIWaitFor {
    aiWaitFor: string;
    timeout?: number;
}
interface MidsceneYamlFlowItemSleep {
    sleep: number;
}
type MidsceneYamlFlowItem = MidsceneYamlFlowItemAIAction | MidsceneYamlFlowItemAIAssert | MidsceneYamlFlowItemAIQuery | MidsceneYamlFlowItemAIWaitFor | MidsceneYamlFlowItemSleep;
interface FreeFn {
    name: string;
    fn: () => void;
}
interface ScriptPlayerTaskStatus extends MidsceneYamlTask {
    status: ScriptPlayerStatusValue;
    currentStep?: number;
    totalSteps: number;
    error?: Error;
}
type ScriptPlayerStatusValue = 'init' | 'running' | 'done' | 'error';

declare class Executor {
    name: string;
    tasks: ExecutionTask[];
    status: 'init' | 'pending' | 'running' | 'completed' | 'error';
    onTaskStart?: ExecutionTaskProgressOptions['onTaskStart'];
    constructor(name: string, options?: ExecutionTaskProgressOptions & {
        tasks?: ExecutionTaskApply[];
    });
    private markTaskAsPending;
    append(task: ExecutionTaskApply[] | ExecutionTaskApply): Promise<void>;
    flush(): Promise<any>;
    isInErrorState(): boolean;
    latestErrorTask(): ExecutionTask | null;
    dump(): ExecutionDump;
}

interface LocateOpts {
    callAI?: typeof callAiFn<AIElementResponse>;
    quickAnswer?: Partial<AISingleElementResponse>;
}
declare class Insight<ElementType extends BaseElement = BaseElement, ContextType extends UIContext<ElementType> = UIContext<ElementType>> {
    contextRetrieverFn: (action: InsightAction) => Promise<ContextType> | ContextType;
    aiVendorFn: (...args: Array<any>) => Promise<any>;
    onceDumpUpdatedFn?: DumpSubscriber;
    generateElement: InsightOptions['generateElement'];
    taskInfo?: Omit<InsightTaskInfo, 'durationMs'>;
    constructor(context: ContextType | ((action: InsightAction) => Promise<ContextType> | ContextType), opt?: InsightOptions);
    locate(query: string | PlanningLocateParam, opt?: LocateOpts): Promise<ElementType | null>;
    extract<T = any>(input: string): Promise<T>;
    extract<T extends Record<string, string>>(input: T): Promise<Record<keyof T, any>>;
    extract<T extends object>(input: Record<keyof T, string>): Promise<T>;
    assert(assertion: string): Promise<InsightAssertionResponse>;
}

export { AISingleElementResponse, BaseElement, DumpSubscriber, ExecutionDump, ExecutionTask, ExecutionTaskApply, ExecutionTaskProgressOptions, Executor, type FreeFn, Insight, InsightAction, InsightAssertionResponse, InsightOptions, InsightTaskInfo, type MidsceneYamlFlowItem, type MidsceneYamlFlowItemAIAction, type MidsceneYamlFlowItemAIAssert, type MidsceneYamlFlowItemAIQuery, type MidsceneYamlFlowItemAIWaitFor, type MidsceneYamlFlowItemSleep, type MidsceneYamlScript, type MidsceneYamlScriptEnv, type MidsceneYamlTask, PlanningLocateParam, type ScriptPlayerStatusValue, type ScriptPlayerTaskStatus, UIContext, Insight as default };
