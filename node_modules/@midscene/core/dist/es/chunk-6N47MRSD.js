import {
  MIDSCENE_DEBUG_MODE,
  MIDSCENE_OPENAI_INIT_CONFIG_JSON,
  getAIConfig,
  getAIConfigInJson
} from "./chunk-DWFHUOJE.js";

// src/utils.ts
import { execSync } from "child_process";
import { existsSync, mkdirSync, readFileSync, writeFileSync } from "fs";
import { tmpdir } from "os";
import * as path from "path";
import { dirname as dirname2 } from "path";
import { getRunningPkgInfo } from "@midscene/shared/fs";
import { assert } from "@midscene/shared/utils";
import { ifInBrowser, uuid } from "@midscene/shared/utils";
var logDir = path.join(process.cwd(), "./midscene_run/");
var logEnvReady = false;
var groupedActionDumpFileExt = "web-dump.json";
function getLogDir() {
  return logDir;
}
function setLogDir(dir) {
  logDir = dir;
}
function getLogDirByType(type) {
  if (ifInBrowser) {
    return "";
  }
  const dir = path.join(getLogDir(), type);
  if (!existsSync(dir)) {
    mkdirSync(dir, { recursive: true });
  }
  return dir;
}
var reportTpl = null;
function getReportTpl() {
  if (ifInBrowser) {
    if (!reportTpl && window.get_midscene_report_tpl) {
      reportTpl = window.get_midscene_report_tpl();
    }
    return reportTpl;
  }
  const __dirname = dirname2(__filename);
  if (!reportTpl) {
    let reportPath = path.join(__dirname, "../../report/index.html");
    if (!existsSync(reportPath)) {
      reportPath = path.join(__dirname, "../report/index.html");
    }
    reportTpl = readFileSync(reportPath, "utf-8");
  }
  return reportTpl;
}
function replaceStringWithFirstAppearance(str, target, replacement) {
  const index = str.indexOf(target);
  return str.slice(0, index) + replacement + str.slice(index + target.length);
}
function reportHTMLContent(dumpData) {
  const tpl = getReportTpl();
  if (!tpl) {
    console.warn("reportTpl is not set, will not write report");
    return "";
  }
  let reportContent;
  if (Array.isArray(dumpData) && dumpData.length === 0 || typeof dumpData === "undefined") {
    reportContent = replaceStringWithFirstAppearance(
      tpl,
      "{{dump}}",
      `<script type="midscene_web_dump" type="application/json"></script>`
    );
  } else if (typeof dumpData === "string") {
    reportContent = replaceStringWithFirstAppearance(
      tpl,
      "{{dump}}",
      `<script type="midscene_web_dump" type="application/json">${dumpData}</script>`
    );
  } else {
    const dumps = dumpData.map(({ dumpString, attributes }) => {
      const attributesArr = Object.keys(attributes || {}).map((key) => {
        return `${key}="${encodeURIComponent(attributes[key])}"`;
      });
      return `<script type="midscene_web_dump" type="application/json" ${attributesArr.join(
        " "
      )}
>${dumpString}
</script>`;
    });
    reportContent = replaceStringWithFirstAppearance(
      tpl,
      "{{dump}}",
      dumps.join("\n")
    );
  }
  return reportContent;
}
function writeDumpReport(fileName, dumpData) {
  if (ifInBrowser) {
    console.log("will not write report in browser");
    return null;
  }
  const __dirname = dirname2(__filename);
  const midscenePkgInfo = getRunningPkgInfo(__dirname);
  if (!midscenePkgInfo) {
    console.warn("midscenePkgInfo not found, will not write report");
    return null;
  }
  const reportPath = path.join(getLogDirByType("report"), `${fileName}.html`);
  const reportContent = reportHTMLContent(dumpData);
  if (!reportContent) {
    console.warn("reportContent is empty, will not write report");
    return null;
  }
  writeFileSync(reportPath, reportContent);
  return reportPath;
}
function writeLogFile(opts) {
  if (ifInBrowser) {
    return "/mock/report.html";
  }
  const { fileName, fileExt, fileContent, type = "dump" } = opts;
  const targetDir = getLogDirByType(type);
  if (!logEnvReady) {
    assert(targetDir, "logDir should be set before writing dump file");
    const gitIgnorePath = path.join(targetDir, "../../.gitignore");
    let gitIgnoreContent = "";
    if (existsSync(gitIgnorePath)) {
      gitIgnoreContent = readFileSync(gitIgnorePath, "utf-8");
    }
    const logDirName = path.basename(logDir);
    if (!gitIgnoreContent.includes(`${logDirName}/`)) {
      writeFileSync(
        gitIgnorePath,
        `${gitIgnoreContent}
# Midscene.js dump files
${logDirName}/report
${logDirName}/tmp
`,
        "utf-8"
      );
    }
    logEnvReady = true;
  }
  const filePath = path.join(targetDir, `${fileName}.${fileExt}`);
  if (type !== "dump") {
    const outputResourceDir = path.dirname(filePath);
    if (!existsSync(outputResourceDir)) {
      mkdirSync(outputResourceDir, { recursive: true });
    }
    writeFileSync(filePath, fileContent);
  }
  if (opts?.generateReport) {
    return writeDumpReport(fileName, fileContent);
  }
  return filePath;
}
function getTmpDir() {
  try {
    const runningPkgInfo = getRunningPkgInfo();
    if (!runningPkgInfo) {
      return null;
    }
    const { name } = runningPkgInfo;
    const tmpPath = path.join(tmpdir(), name);
    mkdirSync(tmpPath, { recursive: true });
    return tmpPath;
  } catch (e) {
    return null;
  }
}
function getTmpFile(fileExtWithoutDot) {
  if (ifInBrowser) {
    return null;
  }
  const tmpDir = getTmpDir();
  const filename = `${uuid()}.${fileExtWithoutDot}`;
  return path.join(tmpDir, filename);
}
function overlapped(container, target) {
  return container.left < target.left + target.width && container.left + container.width > target.left && container.top < target.top + target.height && container.top + container.height > target.top;
}
async function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
function replacerForPageObject(key, value) {
  if (value && value.constructor?.name === "Page") {
    return "[Page object]";
  }
  if (value && value.constructor?.name === "Browser") {
    return "[Browser object]";
  }
  return value;
}
function stringifyDumpData(data, indents) {
  return JSON.stringify(data, replacerForPageObject, indents);
}
function getVersion() {
  return "0.12.7";
}
function debugLog(...message) {
  const debugMode = getAIConfig(MIDSCENE_DEBUG_MODE);
  if (debugMode) {
    console.log("[Midscene]", ...message);
  }
}
var lastReportedRepoUrl = "";
function uploadTestInfoToServer({ testUrl }) {
  let repoUrl = "";
  let userEmail = "";
  const extraConfig = getAIConfigInJson(MIDSCENE_OPENAI_INIT_CONFIG_JSON);
  const serverUrl = extraConfig?.REPORT_SERVER_URL;
  try {
    repoUrl = execSync("git config --get remote.origin.url").toString().trim();
    userEmail = execSync("git config --get user.email").toString().trim();
  } catch (error) {
    debugLog("Failed to get git info:", error);
  }
  if (serverUrl && (repoUrl && repoUrl !== lastReportedRepoUrl || !repoUrl && testUrl)) {
    debugLog("Uploading test info to server", {
      serverUrl,
      repoUrl,
      testUrl,
      userEmail
    });
    fetch(serverUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        repo_url: repoUrl,
        test_url: testUrl,
        user_email: userEmail
      })
    }).then((response) => response.json()).then((data) => {
      debugLog("Successfully uploaded test info to server:", data);
    }).catch(
      (error) => debugLog("Failed to upload test info to server:", error)
    );
    lastReportedRepoUrl = repoUrl;
  }
}

export {
  groupedActionDumpFileExt,
  getLogDir,
  setLogDir,
  getLogDirByType,
  replaceStringWithFirstAppearance,
  reportHTMLContent,
  writeDumpReport,
  writeLogFile,
  getTmpDir,
  getTmpFile,
  overlapped,
  sleep,
  replacerForPageObject,
  stringifyDumpData,
  getVersion,
  uploadTestInfoToServer
};

//# sourceMappingURL=chunk-6N47MRSD.js.map