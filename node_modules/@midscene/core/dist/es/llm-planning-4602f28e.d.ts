import { i as AIUsageInfo, B as BaseElement, U as UIContext, o as AIElementResponse, h as ElementTreeNode, m as AIElementLocatorResponse, A as AISingleElementResponse, l as AISingleElementResponseByPosition, y as ElementById, p as AISectionParseResponse, r as AIAssertionResponse, H as PlanningAIResponse } from './types-90bb70c9.js';
import { ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam } from 'openai/resources';

type AIArgs = [
    ChatCompletionSystemMessageParam,
    ChatCompletionUserMessageParam
];
declare enum AIActionType {
    ASSERT = 0,
    INSPECT_ELEMENT = 1,
    EXTRACT_DATA = 2,
    PLAN = 3
}
declare function callAiFn<T>(msgs: AIArgs, AIActionTypeValue: AIActionType): Promise<{
    content: T;
    usage?: AIUsageInfo;
}>;

declare function describeUserPage<ElementType extends BaseElement = BaseElement>(context: Omit<UIContext<ElementType>, 'describer'>, opt?: {
    truncateTextLength?: number;
    filterNonTextContent?: boolean;
}): Promise<{
    description: string;
    elementById(id: string): ElementType;
    elementByPosition(position: {
        x: number;
        y: number;
    }, size: {
        width: number;
        height: number;
    }): BaseElement | undefined;
    insertElementByPosition(position: {
        x: number;
        y: number;
    }): ElementType;
    size: {
        width: number;
        height: number;
    };
}>;

declare function transformElementPositionToId(aiResult: AIElementResponse | [number, number], treeRoot: ElementTreeNode<BaseElement>, size: {
    width: number;
    height: number;
}, insertElementByPosition: (position: {
    x: number;
    y: number;
}) => BaseElement): Promise<AIElementLocatorResponse>;
declare function AiLocateElement<ElementType extends BaseElement = BaseElement>(options: {
    context: UIContext<ElementType>;
    targetElementDescription: string;
    callAI?: typeof callAiFn<AIElementResponse | [number, number]>;
    quickAnswer?: Partial<AISingleElementResponse | AISingleElementResponseByPosition>;
}): Promise<{
    parseResult: AIElementLocatorResponse;
    rawResponse: string;
    elementById: ElementById;
    usage?: AIUsageInfo;
}>;
declare function AiLocateSection(options: {
    context: UIContext<BaseElement>;
    sectionDescription: string;
    callAI?: typeof callAiFn<AISectionLocatorResponse>;
}): Promise<{
    sectionBbox: [number, number, number, number];
    rawResponse: string;
    usage: AIUsageInfo | undefined;
}>;
declare function AiExtractElementInfo<T, ElementType extends BaseElement = BaseElement>(options: {
    dataQuery: string | Record<string, string>;
    context: UIContext<ElementType>;
}): Promise<{
    parseResult: AISectionParseResponse<T>;
    elementById: (id: string) => ElementType;
    usage: AIUsageInfo | undefined;
}>;
declare function AiAssert<ElementType extends BaseElement = BaseElement>(options: {
    assertion: string;
    context: UIContext<ElementType>;
}): Promise<{
    content: AIAssertionResponse;
    usage: AIUsageInfo | undefined;
}>;

declare function plan(userInstruction: string, opts: {
    log?: string;
    context: UIContext;
    callAI?: typeof callAiFn<PlanningAIResponse>;
}): Promise<PlanningAIResponse>;

export { AiLocateElement as A, AiAssert as a, AIActionType as b, callAiFn as c, describeUserPage as d, AiExtractElementInfo as e, AiLocateSection as f, plan as p, transformElementPositionToId as t };
